package com.tambapps.http.hyperpoet

import org.junit.jupiter.api.Test

import static org.junit.jupiter.api.Assertions.assertEquals
import static org.junit.jupiter.api.Assertions.assertFalse
import static org.junit.jupiter.api.Assertions.assertNotNull
import static org.junit.jupiter.api.Assertions.assertThrows
import static org.junit.jupiter.api.Assertions.assertTrue

public class HttpPoetTest extends TodoApiRunner {

  internal HttpPoet client = new HttpPoet(baseUrl: "http://${TodoApiRunner.HOST}:${TodoApiRunner.PORT}", contentType: ContentType.JSON, acceptContentType: ContentType.JSON)

  @Test
  fun void testGet() {
    dynobj todo = client.get("/todos/1")

    assertEquals(1, todo.id.value)
    assertEquals(1, todo.userId.value)
    assertEquals('Go to the grocery store', todo.title.value)
    assertFalse(todo.completed.asBool())
    assertTrue(todo.successful().asBool())
    assertEquals(200, todo.code().value)
    assertNotNull(todo.headers())
  }

  @Test
  fun void testPatch() {
    // should also work with dynamic object
    dynobj todo = client.patch("/todos/1", body: [title: DynamicObject.of('new title')])

    assertEquals(1, todo.id.value)
    assertEquals(1, todo.userId.value)
    assertEquals('new title', todo.title.value)
    assertFalse(todo.completed.asBool())
  }

  @Test
  fun void testJsonPatch() {
    // should also work with dynamic object
    dynobj todo = client.jsonPatch("/todos/1/json-patch", patch: [
      JsonPatch.replace(path: '/title', value: 'new title 2'),
      JsonPatch.replace(path: '/userId', value: 46)
    ])
    assertEquals(1, todo.id.value)
    assertEquals(46, todo.userId.value)
    assertEquals('new title 2', todo.title.value)
    assertFalse(todo.completed.asBool())
  }

  @Test
  fun void testJsonPatch_singlePatch() {
    // should also work with dynamic object
    dynobj todo = client.jsonPatch("/todos/1/json-patch", patch: JsonPatch.replace(path: '/title', value: 'some title'))
    assertEquals(1, todo.id.value)
    assertEquals('some title', todo.title.value)
  }

  @Test
  fun void testPost() {
    dynobj todo = client.post "/todos", [title: 'foo', completed: true, userId: 5]

    assertEquals('foo', todo.title.value)
    assertTrue(todo.completed.asBool())
    assertEquals(5, todo.userId.value)
    assertNotNull(todo.id)
  }

  @Test
  fun void testGet_notFound() {
    ErrorResponseException responseException = assertThrows(ErrorResponseException.class) { ->
      client.get("/todos/123456789")
    }
    assertEquals(404, responseException.code)
  }

  @Test
  fun void testGet_notFound_parseResponse() {
    client.errorResponseHandler = ErrorResponseHandlers.parseResponseHandler()
    try {
      dynobj response = client.get("/todos/123456789")
      assertEquals(404, response.status.value)
      assertFalse(response.successful().asBool())
      assertEquals(404, response.code().value)
      assertNotNull(response.headers())
    } finally { // dispose
      client.errorResponseHandler = null
    }
  }
}