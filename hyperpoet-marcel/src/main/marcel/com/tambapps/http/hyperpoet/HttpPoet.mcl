package com.tambapps.http.hyperpoet

import java.util.function.Function
import okhttp3.Headers
import okhttp3.Request
import okhttp3.Response

import marcel.json.DynamicObjectSerializer

class HttpPoet extends AbstractHttpPoet {

  constructor(String baseUrl, ContentType contentType = null, ContentType acceptContentType = null): super(baseUrl) {
    this.contentType = contentType
    this.acceptContentType = acceptContentType
    jsonGenerator.addSerializer(dynobj.class, new DynamicObjectSerializer())
  }

  constructor(): this("")

  fun DynamicObject request(String method, String path, Map params = null, Object body = null, ContentType contentType = null,
              Map headers = null, ContentType acceptContentType = null, Boolean skipHistory = null,
              Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null,
              Function parser = null, Function composer = null) {
    Request r = super.request(method, path, params, contentType, body, composer, headers, acceptContentType)
    Object o = doRequest(r, body, skipHistory, print, printRequestBody, printResponseBody, acceptContentType, parser)
    return DynamicObject.of(o)
  }

  fun DynamicObject get(String path, Map params = null, Object body = null, ContentType contentType = null,
          Map headers = null, ContentType acceptContentType = null, Boolean skipHistory = null,
          Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null,
          Function parser = null, Function composer = null) {
    Object o = request("GET", path, params, body, contentType, headers, acceptContentType, skipHistory, print, printRequestBody,
      printResponseBody, parser, composer)
    return DynamicObject.of(o)
  }

  fun DynamicObject delete(String path, Map params = null, Object body = null, ContentType contentType = null,
            Map headers = null, ContentType acceptContentType = null, Boolean skipHistory = null,
            Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null,
            Function parser = null, Function composer = null) {
    Object o = request("DELETE", path, params, body, contentType, headers, acceptContentType, skipHistory, print, printRequestBody,
      printResponseBody, parser, composer)
    return DynamicObject.of(o)
  }

  fun DynamicObject jsonPatch(String path, Object patch, Object lastModified = null, Object eTag = null,
        Map params = null, Map headers = null, ContentType acceptContentType = null,
        Boolean skipHistory = null, Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null) {
    return jsonPatch(path, [patch] as List, lastModified, eTag, params, headers, acceptContentType, skipHistory
      print, printRequestBody, printResponseBody)
  }

  fun DynamicObject jsonPatch(String path, Object[] patch, Object lastModified = null, Object eTag = null,
        Map params = null, Map headers = null, ContentType acceptContentType = null,
        Boolean skipHistory = null, Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null) {
    return jsonPatch(path, patch.toList(), lastModified, eTag, params, headers, acceptContentType, skipHistory
      print, printRequestBody, printResponseBody)
  }

  fun DynamicObject jsonPatch(String path, List patch, Object lastModified = null, Object eTag = null,
      Map params = null, Map headers = null, ContentType acceptContentType = null,
      Boolean skipHistory = null, Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null) {
    Map actualHeaders = [:]
    if (lastModified != null) {
      if (lastModified instanceof dynobj) {
        // extract last modified from entity object
        dynobj entity = cast<dynobj>(lastModified)
        for (String property in ['updatedAt', 'updated_at', 'lastModified', 'last_modified']) {
          if (entity[property] != null) lastModified = entity[property]
        }
      }
      actualHeaders['If-Modified-Since'] = lastModified
    }
    if (eTag != null) {
      if (eTag instanceof dynobj) {
        dynobj entity = cast<dynobj>(eTag)
        for (String property in ['eTag', 'e_tag']) {
          if (entity[property] != null) eTag = entity[property]
        }
      }
      actualHeaders['If-Match'] = eTag
    }
    if (headers != null) actualHeaders << headers
    return this.patch(path, patch, params, ContentType.JSON_PATCH, actualHeaders, acceptContentType, skipHistory,
      print, printRequestBody, printResponseBody)
  }

  fun DynamicObject patch(String path, Object body = null, Map params = null, ContentType contentType = null,
            Map headers = null, ContentType acceptContentType = null, Boolean skipHistory = null,
            Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null,
            Function parser = null, Function composer = null) {
    Object o = request("PATCH", path, params, body, contentType, headers, acceptContentType, skipHistory, print, printRequestBody,
      printResponseBody, parser, composer)
    return DynamicObject.of(o)
  }

  fun DynamicObject put(String path, Object body = null, Map params = null, ContentType contentType = null,
            Map headers = null, ContentType acceptContentType = null, Boolean skipHistory = null,
            Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null,
            Function parser = null, Function composer = null) {
    Object o = request("PUT", path, params, body, contentType, headers, acceptContentType, skipHistory, print, printRequestBody,
      printResponseBody, parser, composer)
    return DynamicObject.of(o)
  }

  fun DynamicObject post(String path, Object body = null, Map params = null, ContentType contentType = null,
            Map headers = null, ContentType acceptContentType = null, Boolean skipHistory = null,
            Boolean print = null, Boolean printRequestBody = null, Boolean printResponseBody = null,
            Function parser = null, Function composer = null) {
    Object o = request("POST", path, params, body, contentType, headers, acceptContentType, skipHistory, print, printRequestBody,
      printResponseBody, parser, composer)
    return DynamicObject.of(o)
  }

  override protected fun Object handleResponse(Response response, ContentType acceptContentTypeOverride, Function parserOverride) {
    dynobj o = super.handleResponse(response, acceptContentTypeOverride, parserOverride)
    if (o != null) {
      bool isSuccessful = response.isSuccessful()
      int code = response.code()
      Headers headers = response.headers()
      o.registerMethod("successful") { isSuccessful }
      o.registerMethod("code") { code }
      o.registerMethod("headers") { headers }
    }
    return o
  }
}
